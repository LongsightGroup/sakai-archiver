Index: pom.xml
===================================================================
--- pom.xml	(revision 325978)
+++ pom.xml	(working copy)
@@ -21,9 +21,11 @@
 	<packaging>war</packaging>

     <properties>
-        <poi.version>3.10-FINAL</poi.version>
+        <poi.version>3.14</poi.version>
         <yuicompressor.plugin.version>1.2</yuicompressor.plugin.version>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <maven.compiler.source>1.8</maven.compiler.source>
+        <maven.compiler.target>1.8</maven.compiler.target>
     </properties>

     <developers>
@@ -141,6 +143,11 @@
 			<artifactId>poi</artifactId>
 			<version>${poi.version}</version>
 		</dependency>
+    <dependency>
+			<groupId>org.apache.poi</groupId>
+			<artifactId>poi-ooxml</artifactId>
+			<version>${poi.version}</version>
+		</dependency>
         <dependency>
 			<groupId>org.projectlombok</groupId>
 			<artifactId>lombok</artifactId>
@@ -212,7 +219,7 @@
 						</goals>
 						<configuration>
 							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
-							<resources>
+							<resources>
 								<resource>
 									<directory>${basedir}/src/i18n/org/sakaiproject/roster</directory>
 									<includes>
@@ -219,8 +226,8 @@
 										<include>**/*.properties</include>
 									</includes>
 								</resource>
-							</resources>
-						</configuration>
+							</resources>
+						</configuration>
 					</execution>
 				</executions>
 			</plugin>
@@ -263,7 +270,7 @@
                 </executions>
             </plugin>
 		</plugins>
-
+
 	</build>

 </project>
Index: src/java/org/sakaiproject/roster/tool/entityprovider/RosterPOIEntityProvider.java
===================================================================
--- src/java/org/sakaiproject/roster/tool/entityprovider/RosterPOIEntityProvider.java	(revision 325978)
+++ src/java/org/sakaiproject/roster/tool/entityprovider/RosterPOIEntityProvider.java	(working copy)
@@ -24,10 +24,11 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;

 import javax.servlet.http.HttpServletResponse;

@@ -34,11 +35,11 @@
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.poi.hssf.usermodel.HSSFWorkbook;
 import org.apache.poi.ss.usermodel.Cell;
 import org.apache.poi.ss.usermodel.Row;
 import org.apache.poi.ss.usermodel.Sheet;
 import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 import org.sakaiproject.entitybroker.EntityReference;
 import org.sakaiproject.entitybroker.EntityView;
 import org.sakaiproject.entitybroker.entityprovider.annotations.EntityCustomAction;
@@ -45,6 +46,7 @@
 import org.sakaiproject.entitybroker.entityprovider.capabilities.ActionsExecutable;
 import org.sakaiproject.entitybroker.entityprovider.capabilities.AutoRegisterEntityProvider;
 import org.sakaiproject.entitybroker.entityprovider.capabilities.RequestAware;
+import org.sakaiproject.entitybroker.entityprovider.extension.ActionReturn;
 import org.sakaiproject.entitybroker.entityprovider.extension.RequestGetter;
 import org.sakaiproject.entitybroker.exception.EntityException;
 import org.sakaiproject.entitybroker.util.AbstractEntityProvider;
@@ -59,142 +61,196 @@
 import lombok.Setter;

 /**
- * <code>RosterPOIEntityProvider</code> allows Roster to export to Excel via
- * Apache's POI.
- *
+ * <code>RosterPOIEntityProvider</code> allows Roster to export to Excel via Apache's POI.
+ *
  * @author d.b.robinson@lancaster.ac.uk
  */
 public class RosterPOIEntityProvider extends AbstractEntityProvider implements
 		AutoRegisterEntityProvider, ActionsExecutable, RequestAware {
-
+
 	private static final Log log = LogFactory.getLog(RosterPOIEntityProvider.class);
-
-	public final static String ENTITY_PREFIX		= "roster-export";
-	public final static String DEFAULT_ID			= ":ID:";
-
+
+	public final static String ENTITY_PREFIX = "roster-export";
+	public final static String DEFAULT_ID = ":ID:";
+
 	// error messages
-	public final static String MSG_INVALID_ID			= "Invalid site ID";
-	public final static String MSG_NO_SESSION			= "Must be logged in";
-	public final static String MSG_NO_SITE_ID			= "Must provide a site ID";
-	public final static String MSG_NO_FILE_CREATED		= "Error creating file";
+	public final static String MSG_INVALID_ID = "Invalid site ID";
+	public final static String MSG_NO_SESSION = "Must be logged in";
+	public final static String MSG_NO_SITE_ID = "Must provide a site ID";
+	public final static String MSG_NO_FILE_CREATED = "Error creating file";
 	public final static String MSG_NO_EXPORT_PERMISSION = "Current user does not have export permission";
 	public final static String MSG_UNABLE_TO_RETRIEVE_SITE = "Unable to retrieve the requested site";
-
+
 	// roster views
-	public final static String VIEW_OVERVIEW			= "overview";
-	public final static String VIEW_GROUP_MEMBERSHIP	= "group_membership";
-	public final static String VIEW_ENROLLMENT_STATUS	= "status";
-
+	public final static String VIEW_OVERVIEW = "overview";
+	public final static String VIEW_GROUP_MEMBERSHIP = "group_membership";
+	public final static String VIEW_ENROLLMENT_STATUS = "status";
+
 	// key passed as parameters
-	public final static String KEY_GROUP_ID				= "groupId";
-	public final static String KEY_VIEW_TYPE			= "viewType";
-	public final static String KEY_SORT_FIELD			= "sortField";
-	public final static String KEY_SORT_DIRECTION		= "sortDirection";
-	public final static String KEY_BY_GROUP				= "byGroup";
-	public final static String KEY_ENROLLMENT_SET_ID	= "enrollmentSetId";
-	public final static String KEY_ENROLLMENT_STATUS	= "enrollmentStatus";
-	public final static String KEY_FACET_NAME			= "facetName";
-	public final static String KEY_FACET_USER_ID		= "facetUserId";
-	public final static String KEY_FACET_EMAIL			= "facetEmail";
-	public final static String KEY_FACET_ROLE			= "facetRole";
-	public final static String KEY_FACET_GROUPS			= "facetGroups";
-	public final static String KEY_FACET_STATUS			= "facetStatus";
-	public final static String KEY_FACET_CREDITS		= "facetCredits";
-
+	public final static String KEY_GROUP_ID = "groupId";
+	public final static String KEY_VIEW_TYPE = "viewType";
+	public final static String KEY_SORT_FIELD = "sortField";
+	public final static String KEY_SORT_DIRECTION = "sortDirection";
+	public final static String KEY_BY_GROUP = "byGroup";
+	public final static String KEY_ENROLLMENT_SET_ID = "enrollmentSetId";
+	public final static String KEY_ENROLLMENT_STATUS = "enrollmentStatus";
+	public final static String KEY_FACET_NAME = "facetName";
+	public final static String KEY_FACET_USER_ID = "facetUserId";
+	public final static String KEY_FACET_EMAIL = "facetEmail";
+	public final static String KEY_FACET_ROLE = "facetRole";
+	public final static String KEY_FACET_GROUPS = "facetGroups";
+	public final static String KEY_FACET_STATUS = "facetStatus";
+	public final static String KEY_FACET_CREDITS = "facetCredits";
+
 	// defaults to use if any keys are not specified
-	public final static String DEFAULT_FACET_NAME		= "Name";
-	public final static String DEFAULT_FACET_USER_ID	= "User ID";
-	public final static String DEFAULT_FACET_EMAIL		= "Email Address";
-	public final static String DEFAULT_FACET_ROLE		= "Role";
-	public final static String DEFAULT_FACET_GROUPS		= "Groups";
-	public final static String DEFAULT_FACET_STATUS		= "Status";
-	public final static String DEFAULT_FACET_CREDITS	= "Credits";
-	public final static String DEFAULT_GROUP_ID			= "all";
-	public final static String DEFAULT_ENROLLMENT_STATUS= "All";
-	public final static String DEFAULT_VIEW_TYPE		= VIEW_OVERVIEW;
-	public final static String DEFAULT_SORT_FIELD		= RosterMemberComparator.SORT_NAME;
-	public final static int DEFAULT_SORT_DIRECTION		= RosterMemberComparator.SORT_ASCENDING;
-	public final static boolean DEFAULT_BY_GROUP		= false;
-
+	public final static String DEFAULT_FACET_NAME = "Name";
+	public final static String DEFAULT_FACET_USER_ID = "User ID";
+	public final static String DEFAULT_FACET_EMAIL = "Email Address";
+	public final static String DEFAULT_FACET_ROLE = "Role";
+	public final static String DEFAULT_FACET_GROUPS = "Groups";
+	public final static String DEFAULT_FACET_STATUS = "Status";
+	public final static String DEFAULT_FACET_CREDITS = "Credits";
+	public final static String DEFAULT_GROUP_ID = "all";
+	public final static String DEFAULT_ENROLLMENT_STATUS = "All";
+	public final static String DEFAULT_VIEW_TYPE = VIEW_OVERVIEW;
+	public final static String DEFAULT_SORT_FIELD = RosterMemberComparator.SORT_NAME;
+	public final static int DEFAULT_SORT_DIRECTION = RosterMemberComparator.SORT_ASCENDING;
+	public final static boolean DEFAULT_BY_GROUP = false;
+
 	// misc
-	public final static String FILE_EXTENSION		= ".xls";
-	public final static String FILENAME_SEPARATOR	= "_";
-	public final static String FILENAME_BYGROUP		= "ByGroup";
-	public final static String FILENAME_UNGROUPED	= "Ungrouped";
-
-    @Setter
+	public final static String FILE_EXTENSION = ".xls";
+	public final static String FILENAME_SEPARATOR = "_";
+	public final static String FILENAME_BYGROUP = "ByGroup";
+	public final static String FILENAME_UNGROUPED = "Ungrouped";
+
+	@Setter
 	private SakaiProxy sakaiProxy;
-
-    @Setter
+
+	@Setter
 	private RequestGetter requestGetter;
-
+
 	/**
 	 * {@inheritDoc}
 	 */
+	@Override
 	public String getEntityPrefix() {
 		return ENTITY_PREFIX;
 	}
-
-	@EntityCustomAction(action = "export-to-excel", viewKey = EntityView.VIEW_SHOW)
-	public void exportToExcel(OutputStream out, EntityReference reference,
-			Map<String, Object> parameters) {

-		HttpServletResponse response = requestGetter.getResponse();
+	/**
+	 * Gets the output data.
+	 *
+	 * Does not require a HTTP request/response
+	 *
+	 * @param out
+	 * @param reference
+	 * @param parameters
+	 * @throws IOException
+	 */
+	@EntityCustomAction(action = "get-export", viewKey = EntityView.VIEW_SHOW)
+	public ActionReturn getExport(final OutputStream out, final EntityReference reference,
+			final Map<String, Object> parameters) {

-		// user must be logged in
-		String userId = sakaiProxy.getCurrentUserId();
-		if (null == userId) {
-			throw new EntityException(MSG_NO_SESSION, reference.getReference());
-		}
+		final String userId = getUserId(reference);
+		final String siteId = getSiteId(reference);

-		String siteId = reference.getId();
-		if (StringUtils.isBlank(reference.getId())
-				|| DEFAULT_ID.equals(reference.getId())) {
-
-			throw new EntityException(MSG_NO_SITE_ID, reference.getReference());
+		try {
+			if (this.sakaiProxy.hasUserSitePermission(userId, RosterFunctions.ROSTER_FUNCTION_EXPORT, siteId)) {
+				final RosterSite site = getSite(reference, siteId);
+				final Workbook workbook = getExportData(userId, site, parameters);
+				workbook.write(out);
+				out.close();
+				final ActionReturn actionReturn = new ActionReturn("base64",
+						"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", out);
+				return actionReturn;
+
+			} else {
+				throw new EntityException(MSG_NO_EXPORT_PERMISSION, reference.getReference());
+			}
+		} catch (final IOException e) {
+			log.error(MSG_NO_FILE_CREATED, e);
+			throw new EntityException(MSG_NO_FILE_CREATED, reference.getReference());
 		}
+	}

+	/**
+	 * Gets the output data and return as an attachment
+	 *
+	 * @param reference
+	 * @param parameters
+	 */
+	@EntityCustomAction(action = "export-to-excel", viewKey = EntityView.VIEW_SHOW)
+	public void exportToExcel(final OutputStream out, final EntityReference reference, final Map<String, Object> parameters) {
+
+		final String userId = getUserId(reference);
+		final String siteId = getSiteId(reference);
+		final HttpServletResponse response = this.requestGetter.getResponse();
+
 		try {
-			if (sakaiProxy.hasUserSitePermission(userId,
-					RosterFunctions.ROSTER_FUNCTION_EXPORT, siteId)) {
-				RosterSite site = sakaiProxy.getRosterSite(siteId);
-				if (null == site) {
-					throw new EntityException(MSG_UNABLE_TO_RETRIEVE_SITE, reference.getReference());
-				}
-				export(response, site, parameters);
-
+			if (this.sakaiProxy.hasUserSitePermission(userId, RosterFunctions.ROSTER_FUNCTION_EXPORT, siteId)) {
+				final RosterSite site = getSite(reference, siteId);
+
+				final Map<String, String> dataMap = getProcessedParameters(site, parameters);
+				final String groupId = dataMap.get("groupId");
+				final String viewType = dataMap.get("viewType");
+				final String enrollmentSetId = dataMap.get("enrollmentSetId");
+				final String enrollmentStatus = dataMap.get("enrollmentStatus");
+
+				final String filename = createFilename(site, groupId, viewType, enrollmentSetId, enrollmentStatus);
+				response.addHeader("Content-Disposition", "attachment; filename=" + filename);
+				response.addHeader("Content-Encoding", "base64");
+				response.addHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
+
+				final Workbook workbook = getExportData(userId, site, parameters);
+				workbook.write(response.getOutputStream());
+				response.getOutputStream().close();
 			} else {
 				throw new EntityException(MSG_NO_EXPORT_PERMISSION, reference.getReference());
 			}
-		} catch (IOException e) {
-
+		} catch (final IOException e) {
 			log.error(MSG_NO_FILE_CREATED, e);
-
 			throw new EntityException(MSG_NO_FILE_CREATED, reference.getReference());
 		}
+
 	}
-
-	private void addResponseHeader(HttpServletResponse response, String filename) {
-
-		response.addHeader("Content-Encoding", "base64");
-		response.addHeader("Content-Type", "application/vnd.ms-excel");
-		response.addHeader("Content-Disposition", "attachment; filename=" + filename);
+
+	private RosterSite getSite(final EntityReference reference, final String siteId) {
+		final RosterSite site = this.sakaiProxy.getRosterSite(siteId);
+		if (null == site) {
+			throw new EntityException(MSG_UNABLE_TO_RETRIEVE_SITE, reference.getReference());
+		}
+		return site;
 	}
-
-	// TODO split into separate methods for different roster views
-	private String createFilename(RosterSite site, String groupId,
-			String viewType, boolean byGroup, String enrollmentSetId,
-			String enrollmentStatus) {

+	private String getUserId(final EntityReference reference) {
+		final String userId = this.developerHelperService.getCurrentUserId();
+		if (userId == null) {
+			throw new EntityException(MSG_NO_SESSION, reference.getReference());
+		}
+		return userId;
+	}
+
+	private String getSiteId(final EntityReference reference) {
+		final String siteId = reference.getId();
+		if (StringUtils.isBlank(siteId) || DEFAULT_ID.equals(siteId)) {
+			throw new EntityException(MSG_NO_SITE_ID, reference.getReference());
+		}
+		return siteId;
+	}
+
+	private String createFilename(final RosterSite site, final String groupId,
+			final String viewType, final String enrollmentSetId,
+			final String enrollmentStatus) {
+
 		StringBuffer filename = new StringBuffer();

 		if (VIEW_OVERVIEW.equals(viewType)) {

 			filename.append(site.getTitle());
-
+
 			if (null != groupId && !DEFAULT_GROUP_ID.equals(groupId)) {

-				for (RosterGroup group : site.getSiteGroups()) {
+				for (final RosterGroup group : site.getSiteGroups()) {
 					if (group.getId().equals(groupId)) {
 						filename.append(FILENAME_SEPARATOR);
 						filename.append(group.getTitle());
@@ -202,16 +258,6 @@
 					}
 				}
 			}
-		} else if (VIEW_GROUP_MEMBERSHIP.equals(viewType)) {
-
-			filename.append(site.getTitle());
-			filename.append(FILENAME_SEPARATOR);
-
-			if (true == byGroup) {
-				filename.append(FILENAME_BYGROUP);
-			} else {
-				filename.append(FILENAME_UNGROUPED);
-			}
 		} else if (VIEW_ENROLLMENT_STATUS.equals(viewType)) {
 			filename.append(enrollmentSetId);
 			filename.append(FILENAME_SEPARATOR);
@@ -218,9 +264,9 @@
 			filename.append(enrollmentStatus);
 		}

-		Date date = new Date();
+		final Date date = new Date();
 		// ISO formatted date
-		DateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd");
+		final DateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd");

 		filename.append(FILENAME_SEPARATOR);
 		filename.append(isoFormat.format(date));
@@ -230,69 +276,40 @@

 		return filename.toString();
 	}
-
-	private void export(HttpServletResponse response, RosterSite site,
-			Map<String, Object> parameters) throws IOException {

-		// TODO one generic method could handle the parameters?
-		String groupId = getGroupIdValue(parameters);
-		String viewType = getViewTypeValue(parameters);
-		boolean byGroup = getByGroupValue(parameters);
-		int sortDirection = getSortDirectionValue(parameters);
-		String sortField = getSortFieldValue(parameters);
+	/**
+	 * Generate the export data
+	 *
+	 * @param currentUserId
+	 * @param site
+	 * @param parameters
+	 * @return
+	 */
+	private Workbook getExportData(final String currentUserId, final RosterSite site, final Map<String, Object> parameters) {

-		String enrollmentSetId = getEnrollmentSetIdValue(parameters);
-		String enrollmentStatus = getEnrollmentStatusValue(parameters);
+		final Map<String, String> dataMap = getProcessedParameters(site, parameters);
+		final String groupId = dataMap.get("groupId");
+		final String viewType = dataMap.get("viewType");
+		final String enrollmentSetId = dataMap.get("enrollmentSetId");
+		final String enrollmentStatus = dataMap.get("enrollmentStatus");
+		final String enrollmentSetTitle = dataMap.get("enrollmentSetTitle");

-		String enrollmentSetTitle = null;
-		if (null != enrollmentSetId) {
-			for (RosterEnrollment enrollmentSet : site.getSiteEnrollmentSets()) {
+		final List<List<String>> dataInRows = new ArrayList();

-				if (enrollmentSetId.equals(enrollmentSet.getId())) {
-					enrollmentSetTitle = enrollmentSet.getTitle();
-					break;
-				}
-			}
-		}
+		createSpreadsheetTitle(dataInRows, site, groupId, viewType);

-		addResponseHeader(response, createFilename(site, groupId, viewType,
-				byGroup, enrollmentSetTitle, enrollmentStatus));
+		final List<String> header = createColumnHeader(parameters, viewType, site.getId());

-		List<List<String>> dataInRows = new ArrayList<List<String>>();
-
-		createSpreadsheetTitle(dataInRows, site, groupId, viewType,
-				enrollmentSetTitle);
-
-		List<String> header = createColumnHeader(parameters, viewType, site.getId());
-
 		if (VIEW_OVERVIEW.equals(viewType)) {

-			List<RosterMember> rosterMembers = getMembership(site.getId(),
-					groupId, sortDirection, sortField);
+			final List<RosterMember> rosterMembers = getMembership(site.getId(), groupId);

 			if (null != rosterMembers) {
 				addOverviewRows(dataInRows, rosterMembers, header, site.getId());
 			}
-
-		} else if (VIEW_GROUP_MEMBERSHIP.equals(viewType)) {
-
-			List<RosterMember> rosterMembers = getMembership(site.getId(),
-					groupId, sortDirection, sortField);
-
-			if (null != rosterMembers) {
-				if (byGroup) {
-					addGroupMembershipByGroupRows(dataInRows, rosterMembers,
-							site, header);
-				} else {
-					addGroupMembershipUngroupedRows(dataInRows, rosterMembers,
-							header);
-				}
-			}
 		} else if (VIEW_ENROLLMENT_STATUS.equals(viewType)) {

-			List<RosterMember> rosterMembers = getEnrolledMembership(site
-					.getId(), enrollmentSetId, sortDirection, sortField,
-					enrollmentStatus);
+			final List<RosterMember> rosterMembers = getEnrolledMembership(site.getId(), enrollmentSetId, enrollmentStatus);

 			if (null != rosterMembers) {
 				addEnrollmentStatusRows(dataInRows, rosterMembers, header,
@@ -300,231 +317,150 @@
 			}
 		}

-		Workbook workBook = new HSSFWorkbook();
-		Sheet sheet = workBook.createSheet();
+		final Workbook workBook = new XSSFWorkbook();
+		final Sheet sheet = workBook.createSheet();

 		for (int i = 0; i < dataInRows.size(); i++) {
-
-			Row row = sheet.createRow(i);
-
+			final Row row = sheet.createRow(i);
 			for (int j = 0; j < dataInRows.get(i).size(); j++) {
-
-				Cell cell = row.createCell(j);
+				final Cell cell = row.createCell(j);
 				cell.setCellValue(dataInRows.get(i).get(j));
 			}
 		}

-		workBook.write(response.getOutputStream());
-		response.getOutputStream().close();
+		return workBook;
 	}

-	private List<RosterMember> getMembership(String siteId, String groupId,
-			int sortDirection, String sortField) {
-
+	private List<RosterMember> getMembership(final String siteId, final String groupId) {
+
 		List<RosterMember> rosterMembers;
-
+
 		if (DEFAULT_GROUP_ID.equals(groupId)) {
-			rosterMembers = sakaiProxy.getSiteMembership(siteId, false);
+			rosterMembers = this.sakaiProxy.getSiteMembership(siteId, false);
 		} else {
-			rosterMembers = sakaiProxy.getGroupMembership(siteId, groupId);
+			rosterMembers = this.sakaiProxy.getGroupMembership(siteId, groupId);
 		}
-
+
 		if (null == rosterMembers) {
 			return null;
 		}

-		Collections.sort(rosterMembers, new RosterMemberComparator(sortField,
-				sortDirection, sakaiProxy.getFirstNameLastName()));
 		return rosterMembers;
 	}
-
-	private List<RosterMember> getEnrolledMembership(String siteId,
-			String enrollmentSetId, int sortDirection, String sortField,
-			String enrollmentStatus) {

-		List<RosterMember> rosterMembers = sakaiProxy.getEnrollmentMembership(
-				siteId, enrollmentSetId);
-
+	private List<RosterMember> getEnrolledMembership(final String siteId, final String enrollmentSetId,
+			final String enrollmentStatusId) {
+
+		final List<RosterMember> rosterMembers = this.sakaiProxy.getEnrollmentMembership(siteId, enrollmentSetId);
+
 		List<RosterMember> membersByStatus = null;
-		if (DEFAULT_ENROLLMENT_STATUS.equals(enrollmentStatus)) {
+		if (DEFAULT_ENROLLMENT_STATUS.equals(enrollmentStatusId)) {
 			membersByStatus = rosterMembers;
 		} else {
-
-			membersByStatus = new ArrayList<RosterMember>();
-
-			for (RosterMember rosterMember : rosterMembers) {
-				if (enrollmentStatus.equals(rosterMember.getEnrollmentStatus())) {
+			membersByStatus = new ArrayList();
+			for (final RosterMember rosterMember : rosterMembers) {
+				if (enrollmentStatusId.equals(rosterMember.getEnrollmentStatus())) {
 					membersByStatus.add(rosterMember);
 				}
 			}
 		}
-
-		Collections.sort(membersByStatus, new RosterMemberComparator(sortField,
-				sortDirection, sakaiProxy.getFirstNameLastName()));

 		return membersByStatus;
 	}

-	private void addOverviewRows(List<List<String>> dataInRows,
-			List<RosterMember> rosterMembers, List<String> header, String siteId) {
-
+	private void addOverviewRows(final List<List<String>> dataInRows,
+			final List<RosterMember> rosterMembers, final List<String> header, final String siteId) {
+
+		final String userId = this.developerHelperService.getCurrentUserId();
+
 		dataInRows.add(header);
 		// blank line
-		dataInRows.add(new ArrayList<String>());
-
-		for (RosterMember member : rosterMembers) {
+		dataInRows.add(new ArrayList());

-			List<String> row = new ArrayList<String>();
+		for (final RosterMember member : rosterMembers) {

-			if (sakaiProxy.getFirstNameLastName()) {
+			final List<String> row = new ArrayList();
+
+			if (this.sakaiProxy.getFirstNameLastName()) {
 				row.add(member.getDisplayName());
 			} else {
 				row.add(member.getSortName());
 			}
-
-			if (sakaiProxy.getViewUserDisplayId()) {
+
+			if (this.sakaiProxy.getViewUserDisplayId()) {
 				row.add(member.getDisplayId());
 			}

-			if (sakaiProxy.getViewEmail(siteId)) {
+			if (this.sakaiProxy.getViewEmail(siteId)) {
 				row.add(member.getEmail());
 			}

 			row.add(member.getRole());
-			dataInRows.add(row);
-		}
-	}
-
-	private void addGroupMembershipUngroupedRows(List<List<String>> dataInRows,
-			List<RosterMember> rosterMembers, List<String> header) {
-
-		dataInRows.add(header);
-		// blank line
-		dataInRows.add(new ArrayList<String>());
-
-		for (RosterMember member : rosterMembers) {

-			List<String> row = new ArrayList<String>();
+			if (this.sakaiProxy.hasUserSitePermission(userId, RosterFunctions.ROSTER_FUNCTION_VIEWGROUP, siteId)) {
+				row.add(member.getGroups().values().stream().collect(Collectors.joining(", ")));
+			}

-			if (sakaiProxy.getFirstNameLastName()) {
-				row.add(member.getDisplayName());
-			} else {
-				row.add(member.getSortName());
-			}
-
-			if (sakaiProxy.getViewUserDisplayId()) {
-				row.add(member.getDisplayId());
-			}
-
-			row.add(member.getRole());
-			row.add(member.getGroupsToString());
-
 			dataInRows.add(row);
 		}
 	}

-	private void addGroupMembershipByGroupRows(List<List<String>> dataInRows,
-			List<RosterMember> rosterMembers, RosterSite site, List<String> header) {
+	private void addEnrollmentStatusRows(final List<List<String>> dataInRows,
+			final List<RosterMember> enrollmentSet, /* RosterSite site, */
+			final List<String> header, final String enrollmentSetTitle,
+			final String enrollmentStatus, final String siteId) {

-		for (RosterGroup group : site.getSiteGroups()) {
-			List<String> groupTitle = new ArrayList<String>();
-			groupTitle.add(group.getTitle());
+		final String userId = this.developerHelperService.getCurrentUserId();

-			dataInRows.add(groupTitle);
-			// blank line
-			dataInRows.add(new ArrayList<String>());
-
-			dataInRows.add(header);
-			// blank line
-			dataInRows.add(new ArrayList<String>());
-
-			for (RosterMember member : rosterMembers) {
-
-				if (null != member.getGroups().get(group.getId())) {
-
-					List<String> row = new ArrayList<String>();
-
-					if (sakaiProxy.getFirstNameLastName()) {
-						row.add(member.getDisplayName());
-					} else {
-						row.add(member.getSortName());
-					}
-
-					if (sakaiProxy.getViewUserDisplayId()) {
-						row.add(member.getDisplayId());
-					}
-
-					row.add(member.getRole());
-					row.add(member.getGroupsToString());
-					dataInRows.add(row);
-				}
-			}
-
-			// blank line
-			dataInRows.add(new ArrayList<String>());
-		}
-	}
-
-	private void addEnrollmentStatusRows(List<List<String>> dataInRows,
-			List<RosterMember> enrollmentSet, /* RosterSite site, */
-			List<String> header, String enrollmentSetTitle,
-			String enrollmentStatus, String siteId) {
-
-		List<String> enrollmentSetTitleRow = new ArrayList<String>();
+		final List<String> enrollmentSetTitleRow = new ArrayList();
 		enrollmentSetTitleRow.add(enrollmentSetTitle);
 		dataInRows.add(enrollmentSetTitleRow);

 		// blank line
-		dataInRows.add(new ArrayList<String>());
+		dataInRows.add(new ArrayList());

-		List<String> enrollmentStatusRow = new ArrayList<String>();
+		final List<String> enrollmentStatusRow = new ArrayList();
 		enrollmentStatusRow.add(enrollmentStatus);
 		dataInRows.add(enrollmentStatusRow);

 		// blank line
-		dataInRows.add(new ArrayList<String>());
+		dataInRows.add(new ArrayList());

 		dataInRows.add(header);
-
+
 		// blank line
-		dataInRows.add(new ArrayList<String>());
-
-		for (RosterMember member : enrollmentSet) {
+		dataInRows.add(new ArrayList());

-			List<String> row = new ArrayList<String>();
+		for (final RosterMember member : enrollmentSet) {

-			if (sakaiProxy.getFirstNameLastName()) {
+			final List<String> row = new ArrayList();
+
+			if (this.sakaiProxy.getFirstNameLastName()) {
 				row.add(member.getDisplayName());
 			} else {
 				row.add(member.getSortName());
 			}
-
-			if (sakaiProxy.getViewUserDisplayId()) {
+
+			if (this.sakaiProxy.getViewUserDisplayId()) {
 				row.add(member.getDisplayId());
 			}

-			if (sakaiProxy.getViewEmail(siteId)) {
+			if (this.sakaiProxy.getViewEmail(siteId)) {
 				row.add(member.getEmail());
 			}
-
+
 			row.add(member.getEnrollmentStatus());
 			row.add(member.getCredits());
-
+
+			if (this.sakaiProxy.hasUserSitePermission(userId, RosterFunctions.ROSTER_FUNCTION_VIEWGROUP, siteId)) {
+				row.add(member.getGroups().values().stream().collect(Collectors.joining(", ")));
+			}
+
 			dataInRows.add(row);
 		}
 	}

-	private String getSortFieldValue(Map<String, Object> parameters) {
-		String sortField;
-		if (null != parameters.get(KEY_SORT_FIELD)) {
-			sortField = parameters.get(KEY_SORT_FIELD).toString();
-		} else {
-			sortField = DEFAULT_SORT_FIELD;
-		}
-		return sortField;
-	}
-
-	private String getEnrollmentSetIdValue(Map<String, Object> parameters) {
+	private String getEnrollmentSetIdValue(final Map<String, Object> parameters) {
 		String enrollmentSetId = null;
 		if (null != parameters.get(KEY_ENROLLMENT_SET_ID)) {
 			enrollmentSetId = parameters.get(KEY_ENROLLMENT_SET_ID).toString();
@@ -531,37 +467,17 @@
 		}
 		return enrollmentSetId;
 	}
-
-	private String getEnrollmentStatusValue(Map<String, Object> parameters) {
+
+	private String getEnrollmentStatusValue(final Map<String, Object> parameters) {
 		String enrollmentStatus = null;
 		if (null != parameters.get(KEY_ENROLLMENT_STATUS)) {
-			enrollmentStatus = parameters.get(KEY_ENROLLMENT_STATUS).toString();
+			enrollmentStatus = parameters.get(KEY_ENROLLMENT_STATUS).toString().toLowerCase();
 		}
 		return enrollmentStatus;
 	}

-	private int getSortDirectionValue(Map<String, Object> parameters) {
+	private String getViewTypeValue(final Map<String, Object> parameters) {

-		if (null != parameters.get(KEY_SORT_DIRECTION)) {
-			return Integer.parseInt(parameters.get(KEY_SORT_DIRECTION)
-					.toString());
-		} else {
-			return DEFAULT_SORT_DIRECTION;
-		}
-	}
-
-	private boolean getByGroupValue(Map<String, Object> parameters) {
-
-		if (null != parameters.get(KEY_BY_GROUP)) {
-			return Boolean
-					.parseBoolean(parameters.get(KEY_BY_GROUP).toString());
-		} else {
-			return DEFAULT_BY_GROUP;
-		}
-	}
-
-	private String getViewTypeValue(Map<String, Object> parameters) {
-
 		if (null != parameters.get(KEY_VIEW_TYPE)) {
 			return parameters.get(KEY_VIEW_TYPE).toString();
 		} else {
@@ -569,8 +485,8 @@
 		}
 	}

-	private String getGroupIdValue(Map<String, Object> parameters) {
-
+	private String getGroupIdValue(final Map<String, Object> parameters) {
+
 		if (null != parameters.get(KEY_GROUP_ID)) {
 			return parameters.get(KEY_GROUP_ID).toString();
 		}
@@ -577,14 +493,14 @@
 		return null;
 	}

-	private List<String> createColumnHeader(Map<String, Object> parameters,
-			String viewType, String siteId) {
-
-		List<String> header = new ArrayList<String>();
+	private List<String> createColumnHeader(final Map<String, Object> parameters,
+			final String viewType, final String siteId) {
+
+		final List<String> header = new ArrayList<String>();
 		header.add(parameters.get(KEY_FACET_NAME) != null ? parameters.get(
 				KEY_FACET_NAME).toString() : DEFAULT_FACET_NAME);
-
-		if (sakaiProxy.getViewUserDisplayId()) {
+
+		if (this.sakaiProxy.getViewUserDisplayId()) {
 			header.add(parameters.get(KEY_FACET_USER_ID) != null ? parameters.get(
 					KEY_FACET_USER_ID).toString() : DEFAULT_FACET_USER_ID);
 		}
@@ -591,7 +507,7 @@

 		if (VIEW_OVERVIEW.equals(viewType)) {

-			if (sakaiProxy.getViewEmail(siteId)) {
+			if (this.sakaiProxy.getViewEmail(siteId)) {

 				header.add(parameters.get(KEY_FACET_EMAIL) != null ? parameters
 						.get(KEY_FACET_EMAIL).toString() : DEFAULT_FACET_EMAIL);
@@ -609,7 +525,7 @@

 		} else if (VIEW_ENROLLMENT_STATUS.equals(viewType)) {

-			if (sakaiProxy.getViewEmail(siteId)) {
+			if (this.sakaiProxy.getViewEmail(siteId)) {

 				header.add(parameters.get(KEY_FACET_EMAIL) != null ? parameters
 						.get(KEY_FACET_EMAIL).toString() : DEFAULT_FACET_EMAIL);
@@ -624,15 +540,15 @@

 		return header;
 	}
-
-	private void createSpreadsheetTitle(List<List<String>> dataInRows,
-			RosterSite site, String groupId, String viewType, String enrollmentSet) {

-		List<String> title = new ArrayList<String>();
+	private void createSpreadsheetTitle(final List<List<String>> dataInRows,
+			final RosterSite site, final String groupId, final String viewType) {
+
+		final List<String> title = new ArrayList();
 		title.add(site.getTitle());
 		dataInRows.add(title);
 		// blank line
-		dataInRows.add(new ArrayList<String>());
+		dataInRows.add(new ArrayList());

 		// SAK-18513
 		if (VIEW_OVERVIEW.equals(viewType)) {
@@ -639,15 +555,15 @@
 			if (null != groupId && !DEFAULT_GROUP_ID.equals(groupId)) {

 				// TODO look at using maps in RosterSite instead
-				for (RosterGroup group : site.getSiteGroups()) {
-
+				for (final RosterGroup group : site.getSiteGroups()) {
+
 					if (group.getId().equals(groupId)) {
-						List<String> groupTitle = new ArrayList<String>();
+						final List<String> groupTitle = new ArrayList();
 						groupTitle.add(group.getTitle());
 						dataInRows.add(groupTitle);
 						// blank line
-						dataInRows.add(new ArrayList<String>());
-
+						dataInRows.add(new ArrayList());
+
 						break;
 					}
 				}
@@ -654,4 +570,38 @@
 			}
 		}
 	}
+
+	/**
+	 * Get the set of params we need to do the export
+	 *
+	 * @param site
+	 * @param parameters
+	 * @return
+	 */
+	private Map<String, String> getProcessedParameters(final RosterSite site, final Map<String, Object> parameters) {
+		final String groupId = getGroupIdValue(parameters);
+		final String viewType = getViewTypeValue(parameters);
+
+		final String enrollmentSetId = getEnrollmentSetIdValue(parameters);
+		final String enrollmentStatus = getEnrollmentStatusValue(parameters);
+
+		String enrollmentSetTitle = null;
+		if (null != enrollmentSetId) {
+			for (final RosterEnrollment enrollmentSet : site.getSiteEnrollmentSets()) {
+				if (enrollmentSetId.equals(enrollmentSet.getId())) {
+					enrollmentSetTitle = enrollmentSet.getTitle();
+					break;
+				}
+			}
+		}
+
+		final Map<String, String> map = new HashMap();
+		map.put("groupId", groupId);
+		map.put("viewType", viewType);
+		map.put("enrollmentSetId", enrollmentSetId);
+		map.put("enrollmentStatus", enrollmentStatus);
+		map.put("enrollmentSetTitle", enrollmentSetTitle);
+
+		return map;
+	}
 }
